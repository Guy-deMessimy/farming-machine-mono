services:
  frontend:
    build:
      context: . # Utilise le répertoire courant comme contexte de build
      dockerfile: frontend/Dockerfile # Chemin vers le Dockerfile spécifique pour le frontend
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}" # Ceci mappe le port 3001 du conteneur au port 3005 de l'hôte
    volumes:
      - type: bind
        source: ./frontend # Répertoire source sur l'hôte
        target: /app/frontend # Point de montage dans le conteneur
        consistency: delegated # Optimise les performances I/O pour les montages de volumes et la synchronisation des fichiers
      - type: bind
        source: ./shared # Répertoire partagé sur l'hôte
        target: /app/shared # Point de montage du répertoire partagé dans le conteneur
        consistency: delegated
    environment:
      - REACT_APP_BACKEND_URI=${REACT_APP_BACKEND_URI} # Variable d'environnement pour l'URI du backend
      - CHOKIDAR_USEPOLLING=true  # Active le polling pour la détection de changements de fichiers
    depends_on:
      - backend # Assure que le service backend démarre avant le frontend
      - api # Assure que le service api démarre avant le frontend
    networks:
      - app-network # Connecte le service au réseau app-network

  backend:
    build:
      context: . # Utilise le répertoire courant comme contexte de build
      dockerfile: backend/Dockerfile # Chemin vers le Dockerfile spécifique pour le backend
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}" # Ceci mappe le port 3001 du conteneur au port 3001 de l'hôte
    volumes:
    - type: bind
      source: ./backend # Répertoire source sur l'hôte
      target: /app/backend # Point de montage dans le conteneur
      consistency: delegated # Optimise les performances I/O pour les montages de volumes et la synchronisation des fichiers
    - type: bind
      source: ./shared # Répertoire source sur l'hôte
      target: /app/shared # Point de montage dans le conteneur
      consistency: delegated # Optimise les performances I/O pour les montages de volumes et la synchronisation des fichiers
    - /app/backend/node_modules # Ignore les node_modules pour éviter les conflits
    command: npm run start:dev # Démarre NestJS en mode wa
    environment:
      - NODE_ENV=${NODE_ENV} # Définit l'environnement Node.js
      - API_URL=${API_URL} # Variable d'environnement pour l'URI de l'API
      - CORS_ORIGIN=${CORS_ORIGIN} # Variable d'environnement pour les URI cors
      - CHOKIDAR_USEPOLLING=true # Active le polling pour la détection de changements de fichiers
      - api # Assure que le service api démarre avant le backend
    networks:
      - app-network

  api:
    build:
      context: . # Utilise le répertoire courant comme contexte de build
      dockerfile: api/Dockerfile # Chemin vers le Dockerfile spécifique pour l'api
    ports:
      - "${API_PORT}:${API_PORT}"  # Ceci mappe le port 3002 du conteneur au port 3002 de l'hôte
    volumes:
    - type: bind
      source: ./api # Répertoire source sur l'hôte
      target: /app/api # Point de montage dans le conteneur
      consistency: delegated # Optimise les performances I/O pour les montages de volumes et la synchronisation des fichiers
    - type: bind
      source: ./shared # Répertoire source sur l'hôte
      target: /app/shared # Point de montage dans le conteneur
      consistency: delegated # Optimise les performances I/O pour les montages de volumes et la synchronisation des fichiers
    - /app/api/node_modules # Ignore les node_modules pour éviter les conflits
    environment:
      - NODE_ENV=${NODE_ENV} # Définit l'environnement Node.js
      - DATABASE_URL=mysql://${DATABASE_USER}:${DATABASE_PASSWORD}@${DATABASE_HOST}:3306/${DATABASE_NAME} # URL de connexion à la base de données
      - DATABASE_NAME=${DATABASE_NAME} # Nom de la base de données
      - DATABASE_USER=${DATABASE_USER} # Utilisateur de la base de données
      - DATABASE_PASSWORD=${DATABASE_PASSWORD} # Mot de passe de la base de données
      - DATABASE_HOST=${DATABASE_HOST} # Hôte de la base de données
      - CHOKIDAR_USEPOLLING=true # Active le polling pour la détection de changements de fichiers
    depends_on:
      database:  # Assure que le service database démarre avant l'API
        condition: service_healthy  # Attendre que MySQL soit prêt
    networks:
      - app-network # Connecte le service au réseau app-network

  database:
    image: mysql:8 # Utilise l'image MySQL version 8
    environment:
      - MYSQL_DATABASE=${DATABASE_NAME} # Nom de la base de données à créer
      - MYSQL_ROOT_PASSWORD=${DATABASE_PASSWORD} # Mot de passe root pour MySQL
    volumes:
      - mysql_data:/var/lib/mysql # Persiste les données MySQL
    ports:
      - "3306:3306" # Ceci mappe le port 3006 du conteneur au port 3006 de l'hôte
    networks:
      - app-network  # Connecte le service au réseau app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s


  prisma-studio:
    build:
      context: .  # Utilise le répertoire courant comme contexte de build
      dockerfile: api/Dockerfile # Chemin vers le Dockerfile spécifique pour l'api
    command: npx prisma studio
    volumes:
      - ./api:/app/api # Monte le répertoire api de l'hôte dans le conteneur
      - ./shared:/app/shared # Point de montage du répertoire partagé dans le conteneur
    environment:
      - NODE_ENV=${NODE_ENV}
      - DATABASE_URL=mysql://${DATABASE_USER}:${DATABASE_PASSWORD}@${DATABASE_HOST}:3306/${DATABASE_NAME} # URL de connexion à la base de données
      - DATABASE_NAME=${DATABASE_NAME} # Nom de la base de données
      - DATABASE_USER=${DATABASE_USER} # Utilisateur de la base de données
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}  # Mot de passe de la base de données
      - DATABASE_HOST=${DATABASE_HOST} # Hôte de la base de données
    ports:
      - "5555:5555" # Ceci mappe le port 3006 du conteneur au port 3006 de l'hôte
    depends_on:
      - database
    networks:
      - app-network

networks:
  app-network:
    driver: bridge # Utilise le driver bridge pour le réseau

volumes:
  mysql_data: # Définit un volume nommé pour les données MySQL