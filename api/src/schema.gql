# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""engine type model"""
type EngineTypes {
  id: ID!
  name: String!
  description: String!
  engineModels: [EngineModel!]
}

"""engine model"""
type EngineModel {
  id: ID!
  name: String!
  description: String!
  engineType: EngineTypes
  engines: [Engine!]
}

"""engine model"""
type Engine {
  id: ID!
  modelName: String!
  brandName: String!
  conception: String
  description: String
  engineKwPower: Int
  engineCcPower: Int
  maxKmhSpeed: Int
  petrolLitreTank: Int
  tankLitre: Int
  autonomyMn: Int
  liftingHeightMeter: Int
  weightKg: Int
  workingWidth: Int
  copiesNumber: Int!
  imageUrl: String
  ref: String
  engineModel: EngineModel
}

type DeleteUserResponse {
  success: Boolean!
  userId: String!
  message: String
}

type User {
  id: ID!
  email: String!
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type AuthPayload {
  accessToken: String!
  user: User!
  refreshToken: String
}

type Query {
  findAllEngines(query: EngineQueryDto): [Engine!]
  findAllEngineModel(query: EngineModelQueryDto): [EngineModel!]
  findAllEngineTypes(query: EngineTypesQueryDto): [EngineTypes!]
  findAllUsers(query: UserQueryDto): [User!]
  getUser: User
  ping: String!
}

input EngineQueryDto {
  offset: Int
  limit: Int
  cursor: Int
  orderBy: EngineOrderByInput
  where: EngineWhereInput
}

input EngineOrderByInput {
  id: SortOrder
  brandName: SortOrder
  modelName: SortOrder
}

"""Order of sorting: ASC for ascending, DESC for descending"""
enum SortOrder {
  ASC
  DESC
}

input EngineWhereInput {
  id: Int
  brandName: String
  modelName: String
  engineModelId: [Int!]
  engineTypeId: [Int!]
}

input EngineModelQueryDto {
  offset: Int
  limit: Int
  cursor: Int
  orderBy: EngineModelOrderByInput
  where: EngineModelWhereInput
}

input EngineModelOrderByInput {
  id: SortOrder
  name: SortOrder
}

input EngineModelWhereInput {
  id: Int
  name: String
  engineTypeId: [Int!]
}

input EngineTypesQueryDto {
  offset: Int
  limit: Int
  cursor: Int
  orderBy: EngineTypesOrderByInput
  where: EngineTypesWhereInput
}

input EngineTypesOrderByInput {
  id: SortOrder
  name: SortOrder
}

input EngineTypesWhereInput {
  id: Int
  name: String
}

input UserQueryDto {
  offset: Int
  limit: Int
  cursor: Int
  orderBy: UserOrderByInput
  where: UserWhereInput
}

input UserOrderByInput {
  id: SortOrder
  email: SortOrder
  name: SortOrder
  createdAt: SortOrder
}

input UserWhereInput {
  email: String
  name: String
  idIn: [String!]
}

type Mutation {
  deleteUser(input: GetUserInput!): DeleteUserResponse!
  createUser(input: CreateUserInput!): User!
  signUp(input: SignUpDto!): User!
  signIn(input: SignInDto!): AuthPayload!
  refreshToken: AuthPayload!
}

"""User input model for querying by ID or email"""
input GetUserInput {
  id: String
  email: String
}

input CreateUserInput {
  email: String!
  password: String!
  name: String
}

input SignUpDto {
  email: String!
  password: String!
  name: String
}

input SignInDto {
  email: String!
  password: String!
}